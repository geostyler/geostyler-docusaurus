"use strict";(self.webpackChunkgeostyler_site=self.webpackChunkgeostyler_site||[]).push([[876],{219:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var t=s(4848),r=s(8453);const l={},a="Parsing SLD",o={id:"beginner-workshop/style-parser/parse-sld",title:"Parsing SLD",description:"In order to parse SLD, we need two things. The geostyler-sld-parser and a SLD that we want to parse.",source:"@site/docs/beginner-workshop/style-parser/parse-sld.md",sourceDirName:"beginner-workshop/style-parser",slug:"/beginner-workshop/style-parser/parse-sld",permalink:"/geostyler-site/docs/beginner-workshop/style-parser/parse-sld",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Parsing an OpenLayers Style",permalink:"/geostyler-site/docs/beginner-workshop/style-parser/parse-ol"},next:{title:"Summary",permalink:"/geostyler-site/docs/beginner-workshop/summary/"}},i={},d=[];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",img:"img",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"parsing-sld",children:"Parsing SLD"}),"\n",(0,t.jsxs)(n.p,{children:["In order to parse SLD, we need two things. The ",(0,t.jsx)(n.code,{children:"geostyler-sld-parser"})," and a SLD that we want to parse."]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"info"}),"\nAs a reminder: A Styler Parser always translates between a styling format and the internal GeoStyler style format.\nIn this case, we will read and write SLD."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["We already installed the ",(0,t.jsx)(n.code,{children:"geostyler-sld-parser"})," via"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm i geostyler-sld-parser\n"})}),"\n",(0,t.jsx)(n.p,{children:"in a previous chapter. So now, we just have to import it into our application."}),"\n",(0,t.jsxs)(n.p,{children:["To do so, add following statement to ",(0,t.jsx)(n.code,{children:"src/App.js"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import SldParser from 'geostyler-sld-parser';\n"})}),"\n",(0,t.jsx)(n.p,{children:"Next, the SldParser has to be instantiated. This can be done via"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const sldParser = new SldParser();\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In order to read a SLD, the method ",(0,t.jsx)(n.code,{children:"readStyle"})," of the sldParser instance will be used. This method expects\na SLD string as argument and returns a ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",children:"Promise"})," with the matching GeoStyler style."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"sldParser.readStyle(sld)\n    .then((geostylerStyle) => {\n        // Run your actions with the parsed style here, e.g.\n        console.log(geostylerStyle.output);\n    });\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In order to write a SLD, we use the method ",(0,t.jsx)(n.code,{children:"writeStyle"})," of the sldParser instance. This methods expects\na GeoStyler style object as argument and returns a Promise with the matching SLD string."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"sldParser.writeStyle(geostylerStyle)\n    .then((sld) => {\n        // Run your actions with the written style here, e.g.\n        console.log(sld.output);\n    });\n"})}),"\n",(0,t.jsxs)(n.p,{children:["We can manually store an example SLD in a variable or we can dynamically load a SLD available remotely via ",(0,t.jsx)(n.code,{children:"fetch()"}),".\nE.g. a ",(0,t.jsx)(n.a,{href:"https://raw.githubusercontent.com/geostyler/geostyler-sld-parser/master/data/slds/1.0/point_simplepoint.sld",children:"simple point style"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"fetch('https://raw.githubusercontent.com/geostyler/geostyler-sld-parser/master/data/slds/1.0/point_simplepoint.sld')\n    .then((response) => {\n        return response.text();\n    })\n    .then((sld) => {\n        // Run your actions with the fetched style here, e.g.\n        console.log(sld);\n    });\n"})}),"\n",(0,t.jsx)(n.p,{children:"Applying this concept to our application, the code should look like below. The variables for the written and read styles were declared\nas React-state-variables and we can display their contents in the application."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"\nimport React, { useState, useEffect } from 'react';\nimport SldParser from 'geostyler-sld-parser';\n\nconst sldParser = new SldParser();\n\nfunction App() {\n\n  const [originalSld, setOriginalSld] = useState('');\n  const [sld, setSld] = useState('');\n  const [style, setStyle] = useState();\n\n  useEffect(() => {\n    fetch('https://raw.githubusercontent.com/geostyler/geostyler-sld-parser/master/data/slds/1.0/point_simplepoint.sld')\n      .then((res) => {\n        if (res.ok) {\n          return res.text();\n        }\n      })\n      .then((text) => {\n        setOriginalSld(text);\n        setSld(text);\n      });\n  }, []);\n\n  useEffect(() =>  {\n    if (!sld) {\n      return;\n    }\n\n    sldParser.readStyle(sld)\n      .then((gsStyle) => {\n        setStyle(gsStyle.output);\n      });\n  }, [sld]);\n\n  useEffect(() => {\n    if (!style) {\n      return;\n    }\n\n    sldParser.writeStyle(style)\n      .then((sldStyle) => {\n        setSld(sldStyle.output);\n      });\n  }, [style]);\n\n  return (\n    <div>\n      <p>\n        {originalSld}\n      </p>\n      <p>\n        {JSON.stringify(style)}\n      </p>\n      <p>\n        {sld}\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n"})}),"\n",(0,t.jsx)(n.p,{children:"Your application should now look as follows:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:s(8266).A+"",children:(0,t.jsx)(n.img,{alt:"Read and written SLD",src:s(92).A+"",width:"1420",height:"370"})})}),"\n",(0,t.jsx)(n.p,{children:"The first section shows the original SLD. The second section shows the read SLD in the GeoStyler format. The third section\nshows the written SLD."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8266:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/files/sld-parsed-0f7175871c5ab9150dc803ccd4e9f827.png"},92:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/sld-parsed-0f7175871c5ab9150dc803ccd4e9f827.png"},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var t=s(6540);const r={},l=t.createContext(r);function a(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);